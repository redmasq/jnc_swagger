openapi: 3.0.3
info:
  title: J-Novel Club API
  version: 1.0.1
  description: J-Novel Club API
  license:
    name: J-Novel Club
externalDocs:
  description: Forum
  url: https://forums.j-novel.club/topic/5142/developer-psa-labs-j-novel-club-is-your-new-friend?page=1
servers:
  - url: https://labs.j-novel.club/app/{version}
    variables:
      'version':
        default: 'v1'
        enum:
          - v1
        description: 'Indicator of API version'
tags:
  - name: auth
    description: Login/Logout
    externalDocs:
      description: Get Access
      url: https://labs.j-novel.club/app/v1
  - name: profile
    description: Information about user and feed
    externalDocs:
      description: Profile
      url: https://labs.j-novel.club/app/v1
components:
  securitySchemes:
    labs_auth:
      type: http
      scheme: bearer
      bearerFormat: token
  schemas:
    ResponseFormat:
      type: string
      enum:
       - json
       - protobuf
       - text
      default: protobuf
    LoginRequest:
      type: object
      required:
      - login
      - password
      properties:
        login:
          type: string
          description: Username
          example: "jnovelclubuser@example.com"
        password:
          type: string
          description: Password
          example: "swordfish"
        slim:
          type: boolean
          description: Set this to true if only needing a login token
    LoginResponse:
      type: object
      properties:
        id:
          type: string
          description: A Bearer Token
          example: "lab_12ABCDEFGHIJL3MN4OPQ5RS6TIVWXUZABCDEF7GHIJKLM8NOPQRS"
        created:
          type: string
          format: date-time
          description: Timestamp for the login request
        ttl:
          type: string
          description: The lenght of time the Bearer token is value in specified units, such as "s" for seconds
          example: "123456s"
    Profile:
      type: object
      properties:
        legacyId:
          type: string
          $ref: '#/components/schemas/LegacyUserId'
        analyticsId:
          type: string
          example: "ab1234b56789c12de3456789"
        customerId:
          type: string
          example: "cus_ABcDEfGhi0J1KL"
        email:
          type: string
          format: email
          example: "jnovelclubuser@example.com"
        username:
          type: string
          example: "jnovelclubuser"
        forumId:
          type: integer
          minimum: 0
          example: 99999
        emailVerified:
          type: boolean
        country:
          type: string
          example: "us"
          description: "Two letter country code"
        earnedCredits:
          type: integer
          minimum: 0
          example: 99
          description: "Likely no longer used"
        usedCredits:
          type: integer
          minimum: 0
          example: 99
          description: "Likely no longer used"
        coins:
          type: integer
          minimum: 0
          example: 9999
          description: "Coins used for things such as buying digital copies"
        created:
          type: string
          format: date-time
    ProfileSubscription:
      type: object
      properties:
        id:
          type: string
          example: "sub_AbCd01eFG23hIJ"
        status:
          type: string
          format: enum
          enum:
           - ACTIVE
           - INACTIVE
        created:
          type: string
          format: date-time
        currentPeriodStart:
          type: string
          format: date-time
        currentPeriodEnd:
          type: string
          format: date-time
        cancelledAt:
          type: string
          format: date-time
        cancelAtPeriodEnd:
          type: boolean
          example: false
        trialStart:
          type: string
          format: date-time
        trialEnd:
          type: string
          format: date-time
        start:
          type: string
          format: date-time
        plan:
          type: object
          $ref: "#/components/schemas/ProfileSubscriptionPlan"
    ProfileSubscriptionPlan:
      type: object
      properties:
        id:
          type: string
        product:
          type: string
          example: prod_ABcDeFGhijK0L1
        amount:
          type: integer
          minimum: 0
          example: 1095
        interval:
          type: string
          format: enum
          enum:
           - MONTH
        active:
          type: boolean

    FeedSummary:
      type: object
      properties:
        username:
          type: string
          example: jnovelclubuser
        list:
          type: array
          items:
            $ref: '#/components/schemas/Link'
    Link:
      type: object
      properties:
        href:
          type: string
          format: relative_url
          example: "/feed/user/0a1234567890b123456c7def.json"
        "#pcdata":
          type: string
          format: title
          example: "JSON"
    UserFeed:
      type: object
      properties:
        version:
          type: string
          format: url
          example: "https://jsonfeed.org/version/1"
        title:
          type: string
          example: "Series follows for jnovelclubuser"
        home_page_url:
          type: string
          format: url
          example: https://j-novel.club/user
        description:
          type: string
          example: "You can add series to your followed list on our website or app"
        author:
          type: object
          $ref: '#/components/schemas/UserFeedAuthor'
        items:
          type: array
          items:
            $ref: '#/components/schemas/UserFeedItem'
          
    UserFeedAuthor:
      type: object
      properties:
        name:
          type: string
          example: J-Novel Club
    UserFeedItem:
      type: object
      properties:
        id:
          type: string
          example: https://j-novel.club/read/book-name-volume-1-part-1
        url:
          type: string
          format: url
          example: https://j-novel.club/read/book-name-volume-1-part-1
        title:
          type: string
          example: "Book Name: Volume 1 Part 1"
        summary:
          type: string
          example: "Read Book Name: Volume 1 Part 1 (available for subscribers)"
        image:
          type: string
          format: url
          example: "https://cdn.example.com/Part1/bookname1-cover-400.jpg"
        date_published:
          type: string
          format: date-time
    LegacyUserId:
      type: string
      example: "0a1234567890b123456c7def"
      description: Can be retrieved from Profile.legacyId
      
paths:
  /auth/login:
    summary: Login
    description: Get an auth token
    post:
      summary: ''
      description: 'Get an authentication token'
      operationId: 'login'
      parameters:
        - name: 'format'
          in: 'query'
          schema:
            $ref: '#/components/schemas/ResponseFormat'
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/LoginRequest'
              
            
      responses:
        200:
          description: Login was successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
      tags:
        - auth
  /me:
    summary: Profile
    description: Show information about the user
    get:
      parameters:
        - name: 'format'
          in: query
          schema:
            $ref: '#/components/schemas/ResponseFormat'

      responses:
        200:
          description: User Profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
      tags:
      - profile
      security:
        - labs_auth:
          - read
          - write
  /me/subscription:
    summary: Profile Subscription Information
    description: Details about Subscription
    get:
      parameters:
        - name: 'format'
          in: 'query'
          schema:
            $ref: '#/components/schemas/ResponseFormat'
      responses:
        200:
          description: User Subscription Information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileSubscription'
      tags:
      - profile
      security:
        - labs_auth:
          - read
          - write
  /feed/user/{userId}:
    summary: Feed for User
    get:
      parameters:
       - name: userId
         in: 'path'
         required: true
         schema:
          $ref: '#/components/schemas/LegacyUserId'
      responses:
        200:
          description: Feed summary
          content:
            text/html:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FeedSummary'
                example: "<html lang=\"en-us\">\n\n<head>\n\t<meta charset=\"utf-8\">\n\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n\t<title>Feed list for jnovelclubuser</title>\n</head>\n\n<body>\n\t<h1>Feed list for jnovelclubuser</h1>\n\t<ul>\n\t\t<li><a href=\"/feed/user/0a1234567890b123456c7def.rss\">RSS</a></li>\n\t\t<li><a href=\"/feed/user/0a1234567890b123456c7def.atom\">Atom</a></li>\n\t\t<li><a href=\"/feed/user/0a1234567890b123456c7def.json\">JSON</a></li>\n\t</ul>\n</body>\n\n</html>"
      tags:
      - profile
      security:
        - labs_auth:
          - read
          - write


              
  /feed/user/{userId}.json:
    summary: Feed for User in Json format
    get:
      parameters:
       - name: userId
         in: 'path'
         required: true
         schema:
          $ref: '#/components/schemas/LegacyUserId'
      responses:
        200:
          description: Feed summary
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserFeed'
      tags:
      - profile
      security:
        - labs_auth:
          - read
          - write



  